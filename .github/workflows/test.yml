name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run frontend type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Run frontend unit tests
        working-directory: ./frontend
        run: npm run test -- --coverage --watchAll=false

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jamMatch_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend linting
        working-directory: ./backend
        run: npm run lint

      - name: Run backend type checking
        working-directory: ./backend
        run: npm run type-check

      - name: Setup test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jamMatch_test
          JWT_SECRET: test-jwt-secret-key-for-testing-purposes-only
          NODE_ENV: test
        run: |
          # Run database migrations if needed
          echo "Database setup complete"

      - name: Run backend unit tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jamMatch_test
          JWT_SECRET: test-jwt-secret-key-for-testing-purposes-only
          NODE_ENV: test
        run: npm run test -- --coverage --watchAll=false

      - name: Run backend integration tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jamMatch_test
          JWT_SECRET: test-jwt-secret-key-for-testing-purposes-only
          NODE_ENV: test
        run: npm run test:integration

      - name: Run performance tests
        working-directory: ./backend
        env:
          NODE_ENV: test
        run: npm run test:performance

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  ai-service-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: ai-service/requirements.txt

      - name: Install AI service dependencies
        working-directory: ./ai-service
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run AI service unit tests
        working-directory: ./ai-service
        run: |
          python -m pytest test_ai_service.py -v --cov=app --cov-report=xml

      - name: Run AI service integration tests
        working-directory: ./ai-service
        run: |
          python test_app.py

      - name: Run AI service performance tests
        working-directory: ./ai-service
        run: |
          python test_performance.py

      - name: Upload AI service coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./ai-service/coverage.xml
          flags: ai-service
          name: ai-service-coverage

  e2e-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jamMatch_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: ai-service/requirements.txt

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && npm ci
          cd ../ai-service && pip install -r requirements.txt

      - name: Install Playwright
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Setup test environment
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jamMatch_test
          JWT_SECRET: test-jwt-secret-key-for-testing-purposes-only
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
        run: |
          # Setup test database
          echo "Test environment setup complete"

      - name: Start services
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jamMatch_test
          JWT_SECRET: test-jwt-secret-key-for-testing-purposes-only
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
        run: |
          # Start AI service
          cd ai-service && python app.py &
          AI_PID=$!

          # Start backend
          cd ../backend && npm start &
          BACKEND_PID=$!

          # Start frontend
          cd ../frontend && npm run build && npm start &
          FRONTEND_PID=$!

          # Wait for services to be ready
          sleep 30

          # Store PIDs for cleanup
          echo $AI_PID > ai_service.pid
          echo $BACKEND_PID > backend.pid
          echo $FRONTEND_PID > frontend.pid

      - name: Run E2E tests
        working-directory: ./frontend
        run: npx playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Cleanup services
        if: always()
        run: |
          if [ -f ai_service.pid ]; then kill $(cat ai_service.pid) || true; fi
          if [ -f backend.pid ]; then kill $(cat backend.pid) || true; fi
          if [ -f frontend.pid ]; then kill $(cat frontend.pid) || true; fi

  security-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run security audit - Frontend
        working-directory: ./frontend
        run: |
          npm audit --audit-level=high

      - name: Run security audit - Backend
        working-directory: ./backend
        run: |
          npm audit --audit-level=high

      - name: Run security audit - AI Service
        working-directory: ./ai-service
        run: |
          pip install safety
          safety check

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  test-summary:
    runs-on: ubuntu-latest
    needs:
      [
        frontend-tests,
        backend-tests,
        ai-service-tests,
        e2e-tests,
        security-tests,
      ]
    if: always()

    steps:
      - name: Test Summary
        run: |
          echo "Test Results Summary:"
          echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "AI Service Tests: ${{ needs.ai-service-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Security Tests: ${{ needs.security-tests.result }}"

          if [[ "${{ needs.frontend-tests.result }}" == "failure" || 
                "${{ needs.backend-tests.result }}" == "failure" || 
                "${{ needs.ai-service-tests.result }}" == "failure" || 
                "${{ needs.e2e-tests.result }}" == "failure" || 
                "${{ needs.security-tests.result }}" == "failure" ]]; then
            echo "❌ Some tests failed"
            exit 1
          else
            echo "✅ All tests passed"
          fi
